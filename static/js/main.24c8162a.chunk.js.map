{"version":3,"sources":["Track.js","TrackList.js","App.js","serviceWorker.js","index.js"],"names":["Track","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","runtime","track","selected","playing","volume","cut","bind","assertThisInitialized","click","playSound","stopSound","incVolume","decVolume","updateRuntime","changingVolume","evt","selectable","console","log","setState","onSelect","v","setTimeout","Math","round","duration","position","react_default","a","createElement","lib_default","url","path","playStatus","Sound","status","PLAYING","STOPPED","autoLoad","onPlaying","cn","className","onClick","title","artist","sound","Button","control","trackDetails","Component","TrackList","selectedIdx","idx","val","_this2","Container","Table","dark","songs","map","x","Track_Track","key","select","App","pdf","handleUpload","success","Row","Col","sm","TrackList_TrackList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w3IAKqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAASR,EAAKD,MAAMU,MAAMD,QAC1BE,UAAU,EACVC,SAAS,EACTC,OAAQ,IAEVZ,EAAKa,IAAMb,EAAKa,IAAIC,KAATb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACXA,EAAKgB,MAAQhB,EAAKgB,MAAMF,KAAXb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACbA,EAAKiB,UAAYjB,EAAKiB,UAAUH,KAAfb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACjBA,EAAKkB,UAAYlB,EAAKkB,UAAUJ,KAAfb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACjBA,EAAKmB,UAAYnB,EAAKmB,UAAUL,KAAfb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACjBA,EAAKoB,UAAYpB,EAAKoB,UAAUN,KAAfb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACjBA,EAAKqB,cAAgBrB,EAAKqB,cAAcP,KAAnBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACrBA,EAAKsB,gBAAe,EAfHtB,qEAkBbuB,GAECpB,KAAKJ,MAAMyB,aAChBC,QAAQC,IAAIvB,KAAKJ,MAAMU,OACnBN,KAAKmB,iBACLnB,KAAKI,MAAMG,SACbP,KAAKiB,YAELjB,KAAKc,kDAIPd,KAAKwB,SAAS,CAAChB,SAAS,IACxBR,KAAKgB,YACLhB,KAAKwB,SAAS,CAACjB,UAAU,IACzBP,KAAKJ,MAAM6B,+CAIXzB,KAAKmB,gBAAiB,EACtB,IAAIO,EAAI1B,KAAKI,MAAMK,OAAO,EACtBiB,EAAI,IAAKC,WAAW3B,KAAKgB,UAAU,IAClChB,KAAKmB,gBAAiB,EAC3BnB,KAAKwB,SAAS,CAACf,OAAQiB,wCAIvB1B,KAAKmB,gBAAiB,EACtB,IAAIO,EAAI1B,KAAKI,MAAMK,OAAO,EACtBiB,EAAI,EAAGC,WAAW3B,KAAKiB,UAAU,KAEnCjB,KAAKe,YACLf,KAAKmB,gBAAiB,GAExBnB,KAAKwB,SAAS,CAACf,OAAQiB,wCAIvB1B,KAAKwB,SAAS,CAAChB,SAAS,EAAMD,UAAU,EAAME,OAAO,IACrDT,KAAKJ,MAAM6B,iDAGCL,GACZpB,KAAKwB,SAAS,CAACnB,QAASuB,KAAKC,OAAOT,EAAIU,SAAWV,EAAIW,UAAU,qCAKjE/B,KAAKe,4CAKL,OACEiB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,IAAKpC,KAAKJ,MAAMU,MAAM+B,KACtBC,WAAYtC,KAAKI,MAAMI,QAAU+B,IAAMC,OAAOC,QAAUF,IAAMC,OAAOE,QACrEjC,OAAQT,KAAKI,MAAMK,OACnBkC,UAAU,EACVC,UAAW5C,KAAKkB,uDAMpB,IAAI2B,EAAK,GAMT,OALI7C,KAAKI,MAAMG,SACbsC,EAAK,UACG7C,KAAKJ,MAAMyB,aACnBwB,EAAK,eAGLb,EAAAC,EAAAC,cAAA,MAAIY,UAAWD,EAAIE,QAAS/C,KAAKa,OAC/BmB,EAAAC,EAAAC,cAAA,UAAKlC,KAAKJ,MAAMU,MAAM0C,OACtBhB,EAAAC,EAAAC,cAAA,UAAKlC,KAAKJ,MAAMU,MAAM2C,QACtBjB,EAAAC,EAAAC,cAAA,UAAKlC,KAAKI,MAAMC,QAAhB,MACCL,KAAKkD,2CAMV,OACElB,EAAAC,EAAAC,cAAA,MAAIY,UAAW9C,KAAKI,MAAMG,SAAW,UAAY,IAC/CyB,EAAAC,EAAAC,cAAA,MAAIa,QAAS/C,KAAKa,OAAQb,KAAKI,MAAMK,OAArC,MACAuB,EAAAC,EAAAC,cAAA,MAAIa,QAAS/C,KAAKa,OAAQb,KAAKI,MAAMC,QAArC,MACA2B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQJ,QAAS/C,KAAKU,KAAtB,YACHV,KAAKkD,0CAMV,OAAOlD,KAAKI,MAAMI,QAAUR,KAAKoD,UAAYpD,KAAKqD,sBAhHnBC,6BCCdC,cACnB,SAAAA,EAAY3D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,IACjB1D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyD,GAAApD,KAAAH,KAAMJ,KACDQ,MAAQ,CACXoD,aAAc,GAHC3D,sEAOZ4D,GACL,IAAIC,EAAO1D,KAAKI,MAAMoD,cAAgBC,GAAO,EAAIA,EACjDzD,KAAKwB,SAAS,CAACgC,YAAaE,qCAGrB,IAAAC,EAAA3D,KACP,OACEgC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACI5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,MAAI,GACZ9B,EAAAC,EAAAC,cAAA,aACG6B,EAAMC,IAAI,SAACC,EAAER,GAAH,OAAWzB,EAAAC,EAAAC,cAACgC,EAAD,CAAO5D,MAAO2D,EAAGE,IAAKV,EACvCpC,YAAwC,IAA5BsC,EAAKvD,MAAMoD,aAA4BC,IAAQE,EAAKvD,MAAMoD,YACtE/B,SAAU,kBAAMkC,EAAKS,OAAOX,kBApBLH,6BCyCxBe,cAvCb,SAAAA,EAAYzE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqE,IACjBxE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuE,GAAAlE,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEkE,KAAM,GACrBzE,EAAK0E,aAAe1E,EAAK0E,aAAa5D,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAHHA,4EAMN2E,GACXxE,KAAKwB,SAAS,CAAC8C,IAAKE,qCAOpB,OACExC,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,UAAQY,UAAU,cAChBd,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAACuC,EAAA,EAAD,wBAEEzC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAKC,GAAgB,IACnB3C,EAAAC,EAAAC,cAAC0C,EAAD,OAKE,cA/BAtB,aCKEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.24c8162a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Sound from 'react-sound';\nimport './App.css';\nimport { Button } from 'reactstrap';\n\nexport default class Track extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      runtime: this.props.track.runtime,\n      selected: false,\n      playing: false,\n      volume: 50\n    };\n    this.cut = this.cut.bind(this);\n    this.click = this.click.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.stopSound = this.stopSound.bind(this);\n    this.incVolume = this.incVolume.bind(this);\n    this.decVolume = this.decVolume.bind(this);\n    this.updateRuntime = this.updateRuntime.bind(this);\n    this.changingVolume=false;\n  }\n\n  click(evt) {\n    // Should check if anything else is selected.\n    if (!this.props.selectable) return;\n    console.log(this.props.track);\n    if (this.changingVolume) return;\n    if (this.state.selected) \n      this.decVolume();\n    else\n      this.playSound();\n  }\n\n  playSound() {\n    this.setState({playing: true});\n    this.incVolume();\n    this.setState({selected: true});\n    this.props.onSelect();\n  }\n\n  incVolume() {\n    this.changingVolume = true;\n    let v = this.state.volume+2;\n    if (v < 100) setTimeout(this.incVolume,50);\n    else this.changingVolume = false;\n    this.setState({volume: v}); \n  }\n\n  decVolume() {\n    this.changingVolume = true;\n    let v = this.state.volume-5;\n    if (v > 0) setTimeout(this.decVolume,50);\n    else {\n      this.stopSound();\n      this.changingVolume = false;\n    }\n    this.setState({volume: v}); \n  }\n\n  stopSound() {\n    this.setState({playing: false,selected: false,volume:0});\n    this.props.onSelect();\n  }\n\n  updateRuntime(evt) {\n    this.setState({runtime: Math.round((evt.duration - evt.position)/1000)})\n  }\n\n\n  cut() {\n    this.stopSound();\n  }\n\n\n  sound() {\n    return (\n      <Sound\n        url={this.props.track.path}\n        playStatus={this.state.playing ? Sound.status.PLAYING : Sound.status.STOPPED}\n        volume={this.state.volume}\n        autoLoad={true}\n        onPlaying={this.updateRuntime}\n      />\n    );\n  }\n\n  trackDetails() {\n    let cn = \"\";\n    if (this.state.selected)\n      cn = \"clicked\";\n    else if (!this.props.selectable) \n      cn = \"unclickable\";\n\n    return (\n      <tr className={cn} onClick={this.click}>\n        <td>{this.props.track.title}</td>\n        <td>{this.props.track.artist}</td>\n        <td>{this.state.runtime} s</td>\n        {this.sound()}\n      </tr>\n    );\n  }\n\n  control() {\n    return (\n      <tr className={this.state.selected ? \"clicked\" : \"\"}>\n        <td onClick={this.click}>{this.state.volume} %</td>\n        <td onClick={this.click}>{this.state.runtime} s</td>\n        <td><Button onClick={this.cut}>Cut out</Button></td>\n        {this.sound()}\n      </tr>\n    );\n  }\n\n  render() {\n    return this.state.playing ? this.control() : this.trackDetails();\n  }\n}","import React, { Component } from 'react';\nimport songs from './songs.json';\nimport './App.css';\nimport Track from './Track.js';\nimport { Container, Table } from 'reactstrap';\n\nexport default class TrackList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIdx: -1\n    }\n  }\n\n  select(idx) {\n    let val = (this.state.selectedIdx === idx ? -1 : idx)\n    this.setState({selectedIdx: val});\n  }\n\n  render() {\n    return (\n      <Container>\n          <Table dark>\n\t        <tbody>\n    \t      {songs.map((x,idx) => <Track track={x} key={idx}\n                selectable={this.state.selectedIdx === -1 ? true : idx === this.state.selectedIdx}\n                onSelect={() => this.select(idx)}/>)}\n\t\t\t</tbody>\n          </Table>\n      </Container>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport TrackList from './TrackList';\n// import ScriptHandler from './ScriptHandler';\nimport { Container, Row, Col } from 'reactstrap';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { pdf : false };\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  handleUpload(success) {\n    this.setState({pdf: success});\n  }\n\n  render() {\n    let doPDF = false;\n    // <ScriptHandler handleUpload={this.handleUpload}/>\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Container>\n            <Row>\n              Award Soundboard\n              <br/>\n              <br/>\n            </Row>\n            <Row>\n              <Col sm={doPDF ? 6 : 12}>\n                <TrackList />\n              </Col>\n              {(doPDF) ? (\n                <Col sm={6} xs={0}>\n                </Col> \n              ) : \"\" }\n            </Row> \n          </Container>  \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}