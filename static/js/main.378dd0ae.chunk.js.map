{"version":3,"sources":["Track.js","TrackList.js","PDFViewer.js","ScriptHandler.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["Track","react_default","a","createElement","this","props","track","name","Button","Component","TrackList","Container","Table","dark","manifest","map","x","Track_Track","key","id","PDFViewer","state","numPages","onDocumentLoadSuccess","document","_this","setState","className","entry","file","source","onLoadSuccess","Object","toConsumableArray","Array","keys","page","pageNumber","ScriptHandler","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","event","target","files","generatePreviewImgUrl","pdfURI","handleUpload","bind","assertThisInitialized","callback","reader","FileReader","readAsDataURL","onloadend","e","result","hidden","type","accept","onChange","PDFViewer_PDFViewer","for","App","pdf","success","Row","Col","TrackList_TrackList","ScriptHandler_ScriptHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.378dd0ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Button } from 'reactstrap';\n\nexport default class Track extends Component {\n  render() {\n    return (\n      <tr>\n\t      <td>{this.props.track.name}</td>\n\t      <td><Button>Fade in</Button></td>\n\t      <td><Button>Fade out</Button></td>\n      </tr>\n\t);\n  }\n}","import React, { Component } from 'react';\nimport manifest from './manifest.json';\nimport './App.css';\nimport Track from './Track.js';\nimport { Container, Table } from 'reactstrap';\n\nexport default class TrackList extends Component {\n  render() {\n    return (\n      <Container>\n          <Table dark>\n\t        <tbody>\n    \t      {manifest.map((x) => <Track track={x} key={x.id}/>)}\n\t\t\t</tbody>\n          </Table>\n      </Container>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { Document, Page, setOptions } from 'react-pdf';\n\nexport default class PDFViewer extends Component {\n  state = {\n    numPages: null,\n  }\n\n  onDocumentLoadSuccess = (document) => {\n    const { numPages } = document;\n    this.setState({\n      numPages,\n    });\n  };\n\n\n  render() {\n    const { numPages } = this.state;\n\n    return (\n      <div className={'pdf'}>\n        <Document\n            file={this.props.source}\n            onLoadSuccess={this.onDocumentLoadSuccess}>\n                {[...Array(numPages).keys()].map(page => (\n                    <Page key={page} pageNumber={page+1} />\n                ))}\n\n        </Document>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport manifest from './manifest.json';\nimport './App.css';\nimport PDFViewer from './PDFViewer.js';\nimport { Container, Button } from 'reactstrap';\nimport { Document, Page } from 'react-pdf';\n\nexport default class ScriptHandler extends Component {\n\tconstructor(props) {\n\t  super(props);\n\n\n\t  // Don't call this.setState() here!\n\t  this.state = { \n\t  \tpdfURI: null,\n\t  \tnumPages: null \n\t  };\n\t  this.onChangeHandler = this.onChangeHandler.bind(this);\n\t  this.generatePreviewImgUrl = this.generatePreviewImgUrl.bind(this);\n\t  this.onDocumentLoadSuccess = this.onDocumentLoadSuccess.bind(this);\n\t}\n\n    onDocumentLoadSuccess = (document) => {\n      const { numPages } = document;\n      this.setState({\n        numPages: numPages,\n      });\n    };\n\n\tgeneratePreviewImgUrl(file, callback) {\n\t\tconst reader = new FileReader()\n\t\tconst url = reader.readAsDataURL(file)\n\t\treader.onloadend = e => callback(reader.result)\n\t}\n\n\tonChangeHandler=event=>{\n\t\tconst file = event.target.files[0]\n\t\t// User cancelled\n\t\tif (!file) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.generatePreviewImgUrl(file, pdfURI => {\n\t\t\t// (assuming we use React)\n\t\t\tthis.setState({ pdfURI })\n\t\t})\n\t\tthis.props.handleUpload(true);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<input hidden type=\"file\" id=\"script-file\" name=\"file\" accept=\".pdf\" onChange={this.onChangeHandler}/>\n\t\t\t\t\t{(this.state.pdfURI) ? \n\t\t\t\t\t\t<PDFViewer source={this.state.pdfURI}/> : \n\t\t\t\t\t\t<label for=\"script-file\">Upload script!</label>}\n\t\t\t</Container>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport './App.css';\nimport TrackList from './TrackList';\nimport ScriptHandler from './ScriptHandler';\nimport { Container, Row, Col } from 'reactstrap';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { pdf : false };\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  handleUpload(success) {\n    this.setState({pdf: success});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Container>\n            <Row>\n              Award Soundboard\n              <br/>\n              <br/>\n            </Row>\n            <Row>\n              <Col>\n                <TrackList />\n              </Col>\n              <Col>\n                  <ScriptHandler handleUpload={this.handleUpload}/>\n              </Col>\n            </Row> \n          </Container>  \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 31;"],"sourceRoot":""}