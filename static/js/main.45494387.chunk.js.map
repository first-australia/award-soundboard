{"version":3,"sources":["Track.js","TrackList.js","App.js","serviceWorker.js","index.js"],"names":["Track","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","runtime","track","selected","playing","volume","click","bind","assertThisInitialized","playSound","stopSound","updateRuntime","evt","console","log","setState","Math","round","duration","position","react_default","a","createElement","className","onClick","title","artist","lib_default","url","path","playStatus","Sound","status","PLAYING","STOPPED","autoLoad","onPlaying","Component","TrackList","Container","Table","dark","songs","map","x","idx","Track_Track","key","App","pdf","handleUpload","success","Row","Col","sm","TrackList_TrackList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45494387.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Sound from 'react-sound';\nimport './App.css';\n\nexport default class Track extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            runtime: this.props.track.runtime,\n            selected: false,\n            playing: false,\n            volume: 50\n        };\n        this.click = this.click.bind(this);\n        this.playSound = this.playSound.bind(this);\n        this.stopSound = this.stopSound.bind(this);\n        this.updateRuntime = this.updateRuntime.bind(this);\n    }\n\n    click(evt) {\n        console.log(this.props.track);\n        if (this.state.selected) \n          this.stopSound();\n        else\n          this.playSound();\n        this.setState({selected: !this.state.selected});\n    }\n\n    playSound() {\n      this.setState({playing: true});\n    }\n\n    stopSound() {\n      this.setState({playing: false});\n    }\n\n    updateRuntime(evt) {\n      this.setState({runtime: Math.round((evt.duration - evt.position)/1000)})\n    }\n\n  render() {\n    return (\n      <tr className={this.state.selected ? \"clicked\" : \"\"} onClick={this.click}>\n          <td>{this.props.track.title}</td>\n          <td>{this.props.track.artist}</td>\n          <td>{this.state.runtime} s</td>\n          <Sound\n            url={this.props.track.path}\n            playStatus={this.state.playing ? Sound.status.PLAYING : Sound.status.STOPPED}\n            volume={this.state.volume}\n            autoLoad={true}\n            onPlaying={this.updateRuntime}\n          />\n      </tr>\n\t);\n  }\n}","import React, { Component } from 'react';\nimport songs from './songs.json';\nimport './App.css';\nimport Track from './Track.js';\nimport { Container, Table } from 'reactstrap';\n\nexport default class TrackList extends Component {\n  render() {\n    return (\n      <Container>\n          <Table dark>\n\t        <tbody>\n    \t      {songs.map((x,idx) => <Track track={x} key={idx}/>)}\n\t\t\t</tbody>\n          </Table>\n      </Container>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport TrackList from './TrackList';\n// import ScriptHandler from './ScriptHandler';\nimport { Container, Row, Col } from 'reactstrap';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { pdf : false };\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  handleUpload(success) {\n    this.setState({pdf: success});\n  }\n\n  render() {\n    let doPDF = false;\n    // <ScriptHandler handleUpload={this.handleUpload}/>\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Container>\n            <Row>\n              Award Soundboard\n              <br/>\n              <br/>\n            </Row>\n            <Row>\n              <Col sm={doPDF ? 6 : 12}>\n                <TrackList />\n              </Col>\n              {(doPDF) ? (\n                <Col sm={6} xs={0}>\n                </Col> \n              ) : \"\" }\n            </Row> \n          </Container>  \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}