{"version":3,"sources":["Track.js","TrackList.js","ScriptHandler.js","App.js","serviceWorker.js","index.js"],"names":["Track","react_default","a","createElement","this","props","track","name","Button","Component","TrackList","Container","Table","dark","manifest","map","x","Track_Track","ScriptHandler","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","event","file","target","files","generatePreviewImgUrl","previewImgUrl","setState","handleUpload","state","bind","assertThisInitialized","callback","reader","FileReader","readAsDataURL","onloadend","e","result","hidden","type","id","onChange","for","src","App","pdf","success","className","Row","Col","TrackList_TrackList","ScriptHandler_ScriptHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6d5ad52.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Button } from 'reactstrap';\n\nexport default class Track extends Component {\n  render() {\n    return (\n      <tr>\n\t      <td>{this.props.track.name}</td>\n\t      <td><Button>Fade in</Button></td>\n\t      <td><Button>Fade out</Button></td>\n      </tr>\n\t);\n  }\n}","import React, { Component } from 'react';\nimport manifest from './manifest.json';\nimport './App.css';\nimport Track from './Track.js';\nimport { Container, Table } from 'reactstrap';\n\nexport default class TrackList extends Component {\n  render() {\n    return (\n      <Container>\n          <Table dark>\n            {manifest.map((x) => <Track track={x} />)}\n          </Table>\n      </Container>\n    );\n  }\n}","import React, { Component } from 'react';\nimport manifest from './manifest.json';\nimport './App.css';\nimport Track from './Track.js';\nimport { Container, Button } from 'reactstrap';\n\nexport default class ScriptHandler extends Component {\n\tconstructor(props) {\n\t  super(props);\n\t  // Don't call this.setState() here!\n\t  this.state = { previewImgUrl: null };\n\t  this.onChangeHandler = this.onChangeHandler.bind(this);\n\t  this.generatePreviewImgUrl = this.generatePreviewImgUrl.bind(this);\n\t}\n\n\tgeneratePreviewImgUrl(file, callback) {\n\t\tconst reader = new FileReader()\n\t\tconst url = reader.readAsDataURL(file)\n\t\treader.onloadend = e => callback(reader.result)\n\t}\n\n\n\tonChangeHandler=event=>{\n\t\tconst file = event.target.files[0]\n\n\t\t// User cancelled\n\t\tif (!file) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.generatePreviewImgUrl(file, previewImgUrl => {\n\t\t// (assuming we use React)\n\t\tthis.setState({ previewImgUrl })\n\t\t})\n\t\tthis.props.handleUpload(true);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<input hidden type=\"file\" id=\"script-file\" name=\"file\" onChange={this.onChangeHandler}/>\n\t\t\t\t<label for=\"script-file\">\n\t\t\t\t\t{(this.state.previewImgUrl != null) ? \n\t\t\t\t\t\t<img src={this.state.previewImgUrl}/> :\n\t\t\t\t\t\t'Upload script!'}\n\t\t\t\t</label>\n\t\t\t</Container>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport './App.css';\nimport TrackList from './TrackList';\nimport ScriptHandler from './ScriptHandler';\nimport { Container, Row, Col } from 'reactstrap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { pdf : false };\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  handleUpload(success) {\n    this.setState({pdf: success});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Container>\n            <Row>\n              Watch this space, and your tournament will instantly get more <i>Pizzazzz</i>.\n              <br/>\n              <br/>\n            </Row>\n            <Row>\n              <Col>\n                <TrackList />\n              </Col>\n              <Col>\n                  <ScriptHandler handleUpload={this.handleUpload}/>\n              </Col>\n            </Row> \n          </Container>  \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}