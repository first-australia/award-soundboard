{"version":3,"sources":["Track.js","TrackList.js","PDFViewer.js","ScriptHandler.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["Track","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","click","bind","assertThisInitialized","evt","console","log","setState","react_default","a","createElement","className","onClick","track","title","artist","runtime","Component","TrackList","Container","Table","dark","songs","map","x","idx","Track_Track","key","PDFViewer","numPages","onDocumentLoadSuccess","document","entry","file","source","onLoadSuccess","toConsumableArray","Array","keys","page","pageNumber","ScriptHandler","onChangeHandler","event","target","files","generatePreviewImgUrl","pdfURI","handleUpload","callback","reader","FileReader","readAsDataURL","onloadend","e","result","hidden","type","id","name","accept","onChange","PDFViewer_PDFViewer","for","App","pdf","success","Row","Col","TrackList_TrackList","ScriptHandler_ScriptHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.1eadb511.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Button } from 'reactstrap';\r\n\r\nexport default class Track extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: false\r\n        };\r\n        this.click = this.click.bind(this);\r\n    }\r\n\r\n    click(evt) {\r\n        console.log(evt);\r\n        this.setState({selected: !this.state.selected});\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <tr className={this.state.selected ? \"clicked\" : \"\"} onClick={this.click}>\r\n          <td>{this.props.track.title}</td>\r\n          <td>{this.props.track.artist}</td>\r\n          <td>{this.props.track.runtime} s</td>\r\n      </tr>\r\n\t);\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport songs from './songs.json';\r\nimport './App.css';\r\nimport Track from './Track.js';\r\nimport { Container, Table } from 'reactstrap';\r\n\r\nexport default class TrackList extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n          <Table dark>\r\n\t        <tbody>\r\n    \t      {songs.map((x,idx) => <Track track={x} key={idx}/>)}\r\n\t\t\t</tbody>\r\n          </Table>\r\n      </Container>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Document, Page, setOptions } from 'react-pdf';\r\n\r\nexport default class PDFViewer extends Component {\r\n  state = {\r\n    numPages: null,\r\n  }\r\n\r\n  onDocumentLoadSuccess = (document) => {\r\n    const { numPages } = document;\r\n    this.setState({\r\n      numPages,\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    const { numPages } = this.state;\r\n\r\n    return (\r\n      <div className={'pdf'}>\r\n        <Document\r\n            file={this.props.source}\r\n            onLoadSuccess={this.onDocumentLoadSuccess}>\r\n                {[...Array(numPages).keys()].map(page => (\r\n                    <Page key={page} pageNumber={page+1} />\r\n                ))}\r\n\r\n        </Document>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport PDFViewer from './PDFViewer.js';\r\nimport { Container, Button } from 'reactstrap';\r\nimport { Document, Page } from 'react-pdf';\r\n\r\nexport default class ScriptHandler extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\r\n\r\n\t  // Don't call this.setState() here!\r\n\t  this.state = { \r\n\t  \tpdfURI: null,\r\n\t  \tnumPages: null \r\n\t  };\r\n\t  this.onChangeHandler = this.onChangeHandler.bind(this);\r\n\t  this.generatePreviewImgUrl = this.generatePreviewImgUrl.bind(this);\r\n\t  this.onDocumentLoadSuccess = this.onDocumentLoadSuccess.bind(this);\r\n\t}\r\n\r\n    onDocumentLoadSuccess = (document) => {\r\n      const { numPages } = document;\r\n      this.setState({\r\n        numPages: numPages,\r\n      });\r\n    };\r\n\r\n\tgeneratePreviewImgUrl(file, callback) {\r\n\t\tconst reader = new FileReader()\r\n\t\tconst url = reader.readAsDataURL(file)\r\n\t\treader.onloadend = e => callback(reader.result)\r\n\t}\r\n\r\n\tonChangeHandler=event=>{\r\n\t\tconst file = event.target.files[0]\r\n\t\t// User cancelled\r\n\t\tif (!file) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.generatePreviewImgUrl(file, pdfURI => {\r\n\t\t\t// (assuming we use React)\r\n\t\t\tthis.setState({ pdfURI })\r\n\t\t})\r\n\t\tthis.props.handleUpload(true);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Container>\r\n\t\t\t\t<input hidden type=\"file\" id=\"script-file\" name=\"file\" accept=\".pdf\" onChange={this.onChangeHandler}/>\r\n\t\t\t\t\t{(this.state.pdfURI) ? \r\n\t\t\t\t\t\t<PDFViewer source={this.state.pdfURI}/> : \r\n\t\t\t\t\t\t<label for=\"script-file\">Upload script!</label>}\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TrackList from './TrackList';\r\nimport ScriptHandler from './ScriptHandler';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { pdf : false };\r\n    this.handleUpload = this.handleUpload.bind(this)\r\n  }\r\n\r\n  handleUpload(success) {\r\n    this.setState({pdf: success});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Container>\r\n            <Row>\r\n              Award Soundboard\r\n              <br/>\r\n              <br/>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <TrackList />\r\n              </Col>\r\n              <Col>\r\n                  <ScriptHandler handleUpload={this.handleUpload}/>\r\n              </Col>\r\n            </Row> \r\n          </Container>  \r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 31;"],"sourceRoot":""}